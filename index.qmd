---
title: "Programa de Prevención y Control del Dengue | 2024"
format: 
  dashboard:
    nav-buttons: [twitter, github, facebook]
theme: custom.scss
---

```{r setup}
library(sf)
mapview::mapviewOptions(default = TRUE,
                        basemaps.color.shuffle = FALSE)
```

# [**Hotspots de Dengue**]{style="font-size:2pt"}

::: panel-tabset
### [**León**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_leon}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "Leon de Aldama", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_leon, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_leon,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_leon,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_leon, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_leon, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>

### [**Guanajuato**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_guanajuato}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "Guanajuato", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_guanajuato, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_guanajuato,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_guanajuato,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_guanajuato, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_guanajuato, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>

### [**Celaya**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_celaya}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "Celaya", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_celaya, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_celaya,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_celaya,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_celaya, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_celaya, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>

### [**Irapuato**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_irapuato}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "Irapuato", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_irapuato, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_irapuato,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_irapuato,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_irapuato, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_irapuato, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>

### [**San Miguel Allende**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_san_miguel}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "San Miguel Allende", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_san_miguel, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_san_miguel,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_san_miguel,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_san_miguel, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_san_miguel, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>

### [**Silao**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_silao}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "Silao de Victoria", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_silao, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_silao,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_silao,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_silao, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_silao, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>

### [**Salamanca**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_salamanca}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "Salamanca", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_salamanca, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_salamanca,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_salamanca,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_salamanca, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_salamanca, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>

### [**Acambaro**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
  width: auto; 
  height: auto;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 220px 220px 220px 550px;
    grid-template-rows: 160px 160px 160px 160px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_acambaro}
# Step 1. extract the localidty
loc <- rgeomex::extract_locality(locality = "Acambaro", 
                                 cve_edo = "11")

# Step 2. extract the locality ####
hotspots <- hotspotsdata::hotspots_hex[loc, ]

# Step 3- Interactive Map ####
pal <- rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                              name = "OrYel")
mapview::mapview(hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions = pal)

```
:::

::: {.box .b}
```{r forest_plot_acambaro, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
hotspots <- hotspots |>
    dplyr::mutate(DENV_2008_2010 = DENV_2008 + DENV_2009 + DENV_2010) |>
    plyr::mutate(DENV_2011_2014 = DENV_2011 + DENV_2012 + DENV_2013 + DENV_2014) |>
    dplyr::mutate(DENV_2015_2017 = DENV_2015 +  DENV_2016 + DENV_2017) |>
    dplyr::mutate(DENV_2018_2019 = DENV_2018 +  DENV_2019) |>
    dplyr::mutate(DENV_2020_2021 = DENV_2020 +  DENV_2021) |>
    dplyr::mutate(DENV_2022_2023 = DENV_2022 +  DENV_2023) 


# Logistic Regression
glm.fit <- glm(hotspots_gi~DENV_2008_2010 + DENV_2011_2014 +
                   DENV_2015_2017 + DENV_2018_2019 +
                   DENV_2020_2021 + DENV_2022_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                       exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_acambaro,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_acambaro,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
                     min = 0, max = 100, 
                     symbol = '%', 
                     label = "Manzanas",
                     flexdashboard::gaugeSectors(success = c(0, 30), 
                                                 warning = c(31, 50), 
                                                 danger = c(51, 100),
                                                 colors = c("#11BB33", #"#63C1A0", 
                                                            "#FC8427",
                                                            "#E01A59")))
```
:::

::: {.box .e}
```{r gauge_AGEB_acambaro, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Hexágonos",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("#11BB33",
                                             "#FC8427",
                                             "#E01A59")))
```
:::

::: {.box .f}
```{r gauge_casos_acambaro, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("#11BB33", 
                                             "#FC8427",
                                             "#E01A59")))
```
:::
:::

</body>

</html>
:::

# [**Hotspots del Vector**]{style="font-size:2pt"}

::: panel-tabset
### [**Guanajuato**]{style="color:#990000"}

```{r vector_hotspots_guanajuato, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "Guanajuato",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**León**]{style="color:#990000"}

```{r vector_hotspots_leon, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "León de Aldama",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**Celaya**]{style="color:#990000"}

```{r vector_hotspots_celaya, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "Celaya",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**Irapuato**]{style="color:#990000"}

```{r vector_hotspots_irapuato, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "Irapuato",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**San Miguel Allende**]{style="color:#990000"}

```{r vector_hotspots_san_miguel, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "San Miguel Allende",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**Silao**]{style="color:#990000"}

```{r vector_hotspots_silao, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "Silao de la Victoria",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**Salamanca**]{style="color:#990000"}

```{r vector_hotspots_salamanca, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "Salamanca",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```

### [**Acámbaro**]{style="color:#990000"}

```{r vector_hotspots_acambaro, dpi = 300, warning=FALSE, message=FALSE}
deneggs::map_eggs_hotspots(betas = denmex::eggs_betas_11_guanajuato,
                           locality = "Acambaro",
                           cve_edo = "11",
                           palette = rcartocolor::carto_pal,
                           name = "SunsetDark",
                           static_map = FALSE)
```
:::

# [**Escenarios Epidemiológicos**]{style="font-size:2pt"}

::: panel-tabset
### [**Leon**]{style="color:#990000"}

<html>
<head>
```{=html}
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {
  font-family: Arial;
  color: white;
}

.split {
  height: 100%;
  width: 50%;
  position: fixed;
  z-index: 1;
  top: 0;
  overflow-x: hidden;
  padding-top: 20px;
}

.left {
  left: 0;
  background-color: #111;
}

.right {
  right: 0;
  background-color: red;
}

.centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.centered img {
  width: 150px;
  border-radius: 50%;
}
</style>
```
</head>

<body>

::: {.split .left}
::: centered
```{r risk_ageb_leon1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "Leon de Aldama")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: {.split .right}
::: centered
```{r risk_ageb_leon2}


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

:::



</body>
</html>

### [**Guanajuato**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
.grid-container1 {
  display: grid;
  grid-template-columns: 300px 300px;
  padding: 5px;
}

.grid-item1 {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 5px;
  font-size: 15px;
  text-align: center;
}
</style>
```
</head>

<body>

<h4>

</h4>

<p>

</p>

::: grid-container1
::: grid-item1
```{r risk_ageb_guanajuato1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "Guanajuato")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: grid-item1
```{r risk_ageb_guanajuato2}
# Step 1. calculate the risk ####
# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = FALSE)

```
:::
:::

</body>

</html>

### [**Celaya**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
.grid-container1 {
  display: grid;
  grid-template-columns: 300px 300px;
  padding: 5px;
}

.grid-item1 {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 5px;
  font-size: 15px;
  text-align: center;
}
</style>
```
</head>

<body>

<h4>

</h4>

<p>

</p>

::: grid-container1
::: grid-item1
```{r risk_ageb_celaya1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "Celaya")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: grid-item1
```{r risk_ageb_celaya2}
# Step 1. calculate the risk ####

# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = FALSE)

```
:::
:::

</body>

</html>

### [**Irapuato**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
.grid-container1 {
  display: grid;
  grid-template-columns: 300px 300px;
  padding: 5px;
}

.grid-item1 {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 5px;
  font-size: 15px;
  text-align: center;
}
</style>
```
</head>

<body>

<h4>

</h4>

<p>

</p>

::: grid-container1
::: grid-item1
```{r risk_ageb_irapuato1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "Irapuato")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: grid-item1
```{r risk_ageb_irapuato2}

# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = FALSE)

```
:::
:::

</body>

</html>

### [**San Miguel Allende**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
.grid-container1 {
  display: grid;
  grid-template-columns: 300px 300px;
  padding: 5px;
}

.grid-item1 {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 5px;
  font-size: 15px;
  text-align: center;
}
</style>
```
</head>

<body>

<h4>

</h4>

<p>

</p>

::: grid-container1
::: grid-item1
```{r risk_ageb_allende1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "San Miguel Allende")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: grid-item1
```{r risk_ageb_allende2}
# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = FALSE)

```
:::
:::

</body>

</html>

### [**Silao**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
.grid-container1 {
  display: grid;
  grid-template-columns: 300px 300px;
  padding: 5px;
}

.grid-item1 {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 5px;
  font-size: 15px;
  text-align: center;
}
</style>
```
</head>

<body>

<h4>

</h4>

<p>

</p>

::: grid-container1
::: grid-item1
```{r risk_ageb_silao1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "Silao de Victoria")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: grid-item1
```{r risk_ageb_silao2}



# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = FALSE)

```
:::
:::

</body>

</html>

### [**Salamanca**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
.grid-container1 {
  display: grid;
  grid-template-columns: 300px 300px;
  padding: 5px;
}

.grid-item1 {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 5px;
  font-size: 15px;
  text-align: center;
}
</style>
```
</head>

<body>

<h4>

</h4>

<p>

</p>

::: grid-container1
::: grid-item1
```{r risk_ageb_salamanca1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "Salamanca")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: grid-item1
```{r risk_ageb_salamanca2}
# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = FALSE)

```
:::
:::

</body>

</html>

### [**Acambaro**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
.grid-container1 {
  display: grid;
  grid-template-columns: 300px 300px;
  padding: 5px;
}

.grid-item1 {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 5px;
  font-size: 15px;
  text-align: center;
}
</style>
```
</head>

<body>

<h4>

</h4>

<p>

</p>

::: grid-container1
::: grid-item1
```{r risk_ageb_acambaro1}
# Step 1. calculate the risk ####
source("~/Dropbox/hotspots_vector_2024/3.Functions/bivariate_map.R")
source("~/Dropbox/hotspots_vector_2024/3.Functions/risk.R")

risk <- risk(betas = denmex::eggs_betas_11_guanajuato,
                 hotspots = hotspotsdata::hotspots_hex,
                 cve_edo = "11",
                 locality = "Acambaro")


# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = TRUE)

```
:::

::: grid-item1
```{r risk_ageb_acambaro2}
# Step 2. map ####
bivariate_map(data = risk, 
              x_leg = 0.67, 
              y_leg = 0.65,
              leg_scale = 0.9,
              size_lab = 7,
              static_map = FALSE)

```
:::
:::

</body>

</html>
:::
